cmake_minimum_required(VERSION 3.12)
project(MyPylonApp LANGUAGES CXX)

# 1. Set C++ standard (equivalent to CFLAGS += -std=c++11)
set(CMAKE_CXX_STANDARD 11)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_CXX_EXTENSIONS OFF)

# 2. Allow overriding PYLON_ROOT (like PYLON_ROOT ?= /opt/pylon)
if(NOT DEFINED ENV{PYLON_ROOT})
  set(PYLON_ROOT "/opt/pylon")
else()
  set(PYLON_ROOT $ENV{PYLON_ROOT})
endif()

message(STATUS "Using PYLON_ROOT=${PYLON_ROOT}")

# 3. Query pylon-config for include flags (like INCLUDES += $(shell pylon-config --cflags))
find_program(PYLON_CONFIG pylon-config
  HINTS "${PYLON_ROOT}/bin"
  DOC "Path to pylon-config executable"
)
if(NOT PYLON_CONFIG)
  message(FATAL_ERROR "Could not find pylon-config in ${PYLON_ROOT}/bin")
endif()

execute_process(
  COMMAND "${PYLON_CONFIG}" --cflags
  OUTPUT_VARIABLE PYLON_CFLAGS
  OUTPUT_STRIP_TRAILING_WHITESPACE
)

# 4. Query pylon-config for link flags (like LIBRARIES += $(shell pylon-config --libs --libs-rpath))
execute_process(
  COMMAND "${PYLON_CONFIG}" --libs --libs-rpath
  OUTPUT_VARIABLE PYLON_LDFLAGS
  OUTPUT_STRIP_TRAILING_WHITESPACE
)

# Translate the cflags string into compile options
# (split on spaces, then add each)
string(REPLACE " " ";" PYLON_CFLAGS_LIST "${PYLON_CFLAGS}")
target_compile_options( ${LF_MAIN_TARGET} PRIVATE ${PYLON_CFLAGS_LIST})

# Likewise for linker flags
string(REPLACE " " ";" PYLON_LDFLAGS_LIST "${PYLON_LDFLAGS}")

include(FetchContent)

FetchContent_Declare(
    wrtdListen
    GIT_REPOSITORY https://github.com/PCS-Toolkit/wrtdListen.git
    GIT_TAG main
)

FetchContent_MakeAvailable(wrtdListen)

target_link_libraries( ${LF_MAIN_TARGET} PRIVATE ${PYLON_LDFLAGS_LIST} wrtdListen)

