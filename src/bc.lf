target CCPP {
  keepalive: true,
  clock-sync: on,
  cmake-include: ["../inc/cmake-bc-extras.txt"],
  files: ["../bc/bagelController1_3.c", 
          "../bc/bagelController1_3_capi.c", 
          "../bc/bagelController1_3_data.c", 
          "../bc/rt_zcfcn.c",
          "../bc/bagelController1_3_capi.h",
          "../bc/bagelController1_3_capi_host.h",
          "../bc/bagelController1_3.h",
          "../bc/bagelController1_3_private.h",
          "../bc/bagelController1_3_types.h",
          "../bc/builtin_typeid_types.h",
          "../bc/rtmodel.h",
          "../bc/rtwtypes.h",
          "../bc/rt_zcfcn.h",
          "../bc/zero_crossing_types.h"
         ]
}

reactor bc {
    input[4] heights_in: uint8_t
    input    current_in: float
    input    set_point_in: float
    input    phase_in: float
//    input[6] cam_z_in: float
    output   demand_out: float
    timer    t(0, 10 ms)


    preamble {=
        #include <stdio.h>
        #include <string.h>
        extern "C" {
        #include "bagelController1_3.h"
        }
        static RT_MODEL_bagelController1_3_T bagelController1_3_M_;

        /* 2) actual scratch/state vectors the code expects */
        static DW_bagelController1_3_T         model_DW;
        static PrevZCX_bagelController1_3_T    model_PrevZCX;

       /* 2) Buffers for inputs & outputs */
       real_T U_BAGEL_HEIGHTS[4];
       real_T U_LIFT_COIL_CURRENT;
       real_T U_PHASE;
       real_T U_SET_POINT;
       real_T U_CAM_Z[6];

       real_T Y_LIFT_COIL_DEMAND;
       real_T Y_X_EST[3];
    =}

    reaction(startup) {=
        printf("CONTROLLER IS STARTING UP at logical time %llu\n", lf_time_logical());
        fflush(stdout);
        RT_MODEL_bagelController1_3_T *const bagelController1_3_M = &bagelController1_3_M_;
        bagelController1_3_M->dwork         = &model_DW;
        bagelController1_3_M->prevZCSigState = &model_PrevZCX;

        /* Zeroâ€‘initialize all I/O & DWorks via the generated init function */
        bagelController1_3_initialize(
            bagelController1_3_M,
            U_BAGEL_HEIGHTS,
            &U_LIFT_COIL_CURRENT,
            &U_PHASE,
            &U_SET_POINT,
            U_CAM_Z,
            &Y_LIFT_COIL_DEMAND,
            Y_X_EST
        );

        /* Optionally, set nonzero initial inputs/parameters here */
        for (int i = 0; i < 4; ++i) {
            U_BAGEL_HEIGHTS[i] = 1.0 + 0.1 * i;
        }
        U_LIFT_COIL_CURRENT = 0.0;
        U_PHASE            = 0.5;
        U_SET_POINT        = 2.0;
        for (int i = 0; i < 6; ++i) {
            U_CAM_Z[i] = 0.0;
        }
    =}

//    reaction(heights_in, current_in, phase_in, set_point_in, cam_z_in) -> demand_out {=
    reaction(heights_in, current_in, phase_in, set_point_in) -> demand_out {=
        printf("CONTROLLER Step at %llu\n", lf_time_logical());
        fflush(stdout);
        RT_MODEL_bagelController1_3_T *const bagelController1_3_M = &bagelController1_3_M_;
        int i;
        for (i=0; i<4; i++) {
            U_BAGEL_HEIGHTS[i] = heights_in[i]->value;
        }
        U_LIFT_COIL_CURRENT = current_in-> value;
        U_PHASE = (int)phase_in->value;
        U_SET_POINT = set_point_in->value;
        for (i=0; i<6; i++) {
//            U_CAM_Z[i] = cam_z_in[i]->value;
            U_CAM_Z[i] = 0.0;
        }
        bagelController1_3_step(
            bagelController1_3_M,
            U_BAGEL_HEIGHTS,
            U_LIFT_COIL_CURRENT,
            U_PHASE,
            U_SET_POINT,
            U_CAM_Z,
           &Y_LIFT_COIL_DEMAND,
            Y_X_EST
        );
        lf_set(demand_out, Y_LIFT_COIL_DEMAND);
    =}
}
