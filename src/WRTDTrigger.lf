target CCPP {
    keepalive: true,
    cmake-include: ["../inc/cmake-operation-time-extras.txt"],
    clock-sync: on
}

reactor WRTDTrigger(event_name: string="") {

  // Define a function which will trigger the physical action
  // That sets the operation_event_time

    output operation_time: instant_t;
    physical action eventRecieved : time ;
    state thread_id: lf_thread_t = 0

  preamble {=
      #include <string.h>
      #include <wrtdListen.h>
      #include "platform.h" // Defines lf_sleep() and thread functions.

      char *event_name;

      void* dispatch_listen(void* eventRecieved) {
          double delay = 0;
          printf("the event name is %s\n", event_name);
          fflush(stdout);
          double event_time = wrtdGetTime("224.0.23.159", 5044, event_name, 60, delay, 37, 1);
          instant_t ev_ns = (instant_t)(event_time * 1E9);
          instant_t *ev_ns_ptr = (instant_t *)calloc(1, sizeof(instant_t));
          *ev_ns_ptr = (instant_t)(event_time * 1E9);
          fflush(stdout);
          lf_schedule_value(eventRecieved, 0, ev_ns_ptr, sizeof(ev_ns));
          return (void *)0;
      }
  =}

//    reaction(startup) -> eventListen {=
    reaction(startup) -> eventRecieved, operation_time {=
        lf_set(operation_time, (instant_t)0);
        event_name = strdup(self->event_name);
        lf_thread_create(&self->thread_id, &dispatch_listen, eventRecieved);
    =}

    reaction(eventRecieved) -> operation_time {=
        // eventRecived->Value  is time_physical in NS of event
        // delta_from_now = time_physical - ev->value
        // logical_event_time = logical_time + delta_from_now
        // set the operation time to that.
        // print deta_from_now in seconds
        printf("GOT THE EVENT\n");
        fflush(stdout);
        instant_t ptime = lf_time_physical();
        instant_t ltime = lf_time_logical();
        instant_t delta_time = (instant_t)eventRecieved->value - ptime;
        instant_t logical_event_time = ltime + delta_time;

        printf("at physical time %ld logical time %ld got event time %ld --> delta time %ld and logical event time %ld\n",
                ptime, ltime, (instant_t)eventRecieved->value, delta_time, logical_event_time);
        printf("\tSO the event is %f seconds in the future\n",delta_time*1E-9);
        fflush(stdout); 
        lf_set(operation_time, logical_event_time);
        printf("SET THE OPERATION_TIME\n");
        fflush(stdout);
    =}

    reaction(shutdown) {=
//        free(event_name);
        printf("WRTDTrigger is all done\n");
        fflush(stdout);
    =}
}
