target CCPP {
    keepalive: true,
    clock-sync: on
}

import WRTDTrigger from "WRTDTrigger.lf"
import MdsValue from "MdsValue.lf"
import MdsPutSignal  from "MdsPutSignal.lf"

reactor Logger {
preamble {=
    #include <stdio.h>
  =}
  input xtime: instant_t
  input xval: float
  reaction(xval, xtime) {=
    double the_time = (lf_time_logical()-xtime->value)*1E-9;
    printf("at time %f xval is %f\n", the_time, xval->value);
  =}
}

main reactor MdsPutSignalTest{
  state thread_id: lf_thread_t = 0
  physical action shutItDown(100 msec)

  preamble {=
    // Schedule an event roughly every 200 msec.
    void* external(void* a) {
      printf("Press RETURN to continue...");
      getchar();  // Waits for user to press Enter
      lf_schedule(a, 0);
      return (void *)0;
    }
  =}


  reaction(startup) -> shutItDown {=
    // Start a thread to schedule physical actions.
    lf_thread_create(&self->thread_id, &external, shutItDown);
  =}

  reaction(shutItDown) {=
      lf_request_stop();
  =}

  g = new Logger()
  h = new WRTDTrigger(event_name="fred");
  f = new MdsValue(host="", tree="bagel", shot=-1, expression="\\BAGEL::TOP.KNOBS:SET_POINT", first_time=-3.0, delta_time = 1 sec)
  i = new MdsPutSignal(host="", treename="bagel", shot=-1, path="\\BAGEL::TOP.KNOBS:DUMMY", first_time=-3.0)

  h.operation_time -> f.op_start_time
  h.operation_time -> g.xtime
  f.value_at_t -> g.xval
  f.value_at_t -> i.signal_value
  f.time_for_value -> i.time_value
}

