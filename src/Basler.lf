target CCPP {
    cmake-include: ["../inc/cmake-basler-extras.txt"],
    keepalive: true,
    files: ["unsigned_char_array_t.c", "unsigned_char_array_t.h" ],
    clock-sync: on
}
    preamble {=
        #include <mdsplus.hpp>
        #include <cstdlib>
        #include <cstdio>
        #include <pylon/PylonIncludes.h>
        #include <pylon/BaslerUniversalInstantCamera.h>
        #include <pylon/BaslerUniversalImageEventHandler.h>
        #include <chrono>
        #include "unsigned_char_array_t.h"

        using namespace Pylon;
        using namespace mdsplus;
        using namespace Basler_UniversalCameraParams;

#ifndef MY_IMAGE_HANDLER_H
#define MY_IMAGE_HANDLER_H
        class MyImageHandler : public CBaslerUniversalImageEventHandler {
        private:
            void* _grab = NULL;
//            CBaslerUniversalInstantCamera* camera;
//            int frame_width;
//            int frame_height;

        public:
            // Default constructor
            MyImageHandler() = default;
            //  the colon thing intializes the member _grab to the argument
            //  of the constructor
            MyImageHandler(void *grab)
                : _grab(grab)
//              , _other_thing(otherarg)
            {}

            // Inline copy constructor (implicitly declared, but shown here for clarity)
            inline MyImageHandler(const MyImageHandler& other)
            : CBaslerUniversalImageEventHandler(other)
            {
                // You could copy additional state here if needed.
                std::cout << "MyImageHandler copied via inline copy constructor\n";
            }

            // Assignment operator (also inline)
            inline MyImageHandler& operator=(const MyImageHandler& other) {
                CBaslerUniversalImageEventHandler::operator=(other);
                std::cout << "MyImageHandler assigned via inline operator=\n";
                return *this;
            }

            // Override the imageâ€‘grab callback
            virtual void OnImageGrabbed(
                CBaslerUniversalInstantCamera& camera,
                const CBaslerUniversalGrabResultPtr& grabResult
            ) override {
//                printf("got a frame - cpp\n");
                if (grabResult->GrabSucceeded()) {
                    size_t buffer_size = grabResult->GetBufferSize();
//                    printf("The size of the frame is  %zu\n", buffer_size);
                    void *buffer = malloc(buffer_size);
                    memcpy(buffer, grabResult->GetBuffer(), buffer_size);
                    lf_schedule_value(_grab, 0, buffer, buffer_size);
                    std::cout << "OnImageGrabbed: Frame #" << grabResult->GetBlockID() << " received\n";
                } else {
                    std::cerr << "OnImageGrabbed: Error code " << grabResult->GetErrorCode() << "\n";
                }
            }
//            void setWidth(unsigned int w) {
//                frame_width = w;
//            }
//            unsigned int getWidth() const {
//                return frame_width;
//            }
//            void setHeight(unsigned int h) {
//                frame_height = h;
//            }
//            unsigned int getHeight() const {
//                return frame_height;
//            }
//            void setCamera(Pylon::CBaslerUniversalInstantCamera& camera_in) {
//               camera = &camera_in;  // store as pointer
//            }
//            CBaslerUniversalInstantCamera getCamera() const {
//                return camera;
//            }
        };
#endif
    =}

reactor Basler(tree_name: string="", shot: int=0, path: string="") {

    preamble {=
        CBaslerUniversalInstantCamera camera;
        #include "unsigned_char_array_t.h"
    =}

    output width_out: int;
    output height_out: int;
    output frame_out:unsigned_char_array_t*;
//    state camera_state: {= CBaslerUniversalInstantCamera* =};
    state handler1: {= MyImageHandler * =};
    state frame_width: int;
    state frame_height: int;
    physical action grab : {= void * =};
    reaction(startup) -> grab, width_out, height_out, frame_out {=
//                lf_schedule(grab2, MSEC(1000));
        lf_set_destructor(frame_out, unsigned_char_array_destructor);
        lf_set_copy_constructor(frame_out, unsigned_char_array_copy_constructor);
        PylonInitialize();

        int exitCode = 0;
        try {
            // Instantiate handler with the physical action
            // and register it with the camera
                Tree tree(self->tree_name, self->shot, Mode::ReadOnly);
                auto parent = tree.getNode(self->path);
            // frame_width and frame_height are globals
                self->frame_width = parent.getNode(":width").getRecord().getData<int>();
                self->frame_height = parent.getNode(":height").getRecord().getData<int>();
                int offsetX = parent.getNode(":OffsetX").getRecord().getData<int>();
                int offsetY = parent.getNode(":OffsetY").getRecord().getData<int>();
                int exposureTimeAbs = parent.getNode(":exposureTime").getRecord().getData<int>();
                int fps =  parent.getNode(":fps").getRecord().getData<int>();
                float gainRaw = parent.getNode("rawGain").getRecord().getData<float>();
                const char * ipAddress = parent.getNode("IpAddress").getRecord().getData<std::string>().c_str();
                char *exposureMode = "Timed";
                char *exposureAuto = "Off";
                char *gainAuto = "Off";
                int GevIEEE1588 = true;
                int acquisitionFrameRateEnable = true;
                lf_set(width_out, self->frame_width);
                lf_set(height_out, self->frame_height);
            
                camera.Attach(CTlFactory::GetInstance().CreateFirstDevice());
                std::cout << "Using device: " << camera.GetDeviceInfo().GetModelName() << "\n";
                camera.Open();
                self->handler1 = new MyImageHandler(grab);
                camera.RegisterImageEventHandler(self->handler1, RegistrationMode_Append, Cleanup_None);

                camera.Width = self->frame_width;
                camera.Height = self->frame_height;
                camera.OffsetX = offsetX;
                camera.OffsetY = offsetY;
                camera.ExposureMode = exposureMode;
                camera.ExposureAuto = exposureAuto;
                camera.ExposureTimeAbs = exposureTimeAbs;
                camera.GainAuto = gainAuto;
                camera.GainRaw = gainRaw;
                camera.GevIEEE1588 = GevIEEE1588;
//                camera.AcquisitionMode = AcquisitionMode_Continuous;
                camera.AcquisitionFrameRateEnable = acquisitionFrameRateEnable;
                camera.AcquisitionFrameRateAbs = fps;
                
                camera.StartGrabbing( GrabStrategy_OneByOne, GrabLoop_ProvidedByInstantCamera );
            } catch (const GenericException& e) {
                // Error handling
                std::cerr << "An exception occurred: " << e.GetDescription() << "\n";
                exitCode = 1;
            }
            // Start a thread to schedule physical actions.
//            lf_thread_t thread_id;
//            lf_thread_create(&thread_id, &external, grab);
    =}

     reaction(shutdown) {=
        // Clean up
        printf("all done now\n");
        camera.StopGrabbing();
        camera.DeregisterImageEventHandler(self->handler1);
        camera.Close();
        camera.DetachDevice();
        delete self->handler1;
        PylonTerminate();
    =}
    reaction(grab) -> frame_out {=

        printf("XXXXXX got a frame\n");
        unsigned_char_array_t* array =  unsigned_char_array_constructor(self->frame_width*self->frame_height);
        memcpy((void *)array->data, (const void*)grab->value, array->length);
        lf_set(frame_out, array);
    =}

}
