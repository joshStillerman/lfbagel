target CCPP {
    keepalive: true,
    clock-sync: on,
    files: ["unsigned_char_array_t.h"],
    cmake-include: ["../inc/cmake-debug-extras.txt"]
}

import Basler from "Basler.lf"
import WRTDTrigger from "WRTDTrigger.lf"
import MdsPutFrame from "MdsPutFrame.lf"

reactor Constant<T>(value: T = {= NULL =}) {
  output out:   T;
  reaction(startup) -> out 
  {= lf_set(out, self->value); =}
}

main reactor BaslerTest{
  state thread_id: lf_thread_t = 0
  physical action shutItDown(100 msec)

  preamble {=
    // Schedule an event roughly every 200 msec.
    void* external(void* a) {
      printf("Press RETURN to continue...");
      getchar();  // Waits for user to press Enter
      lf_schedule(a, 0);
      return (void *)0;
    }
    #include "unsigned_char_array_t.h"
  =}



  trig = new WRTDTrigger(event_name="fred");
  camera1 = new Basler(tree_name="basler", shot=0, path="\\top.basler1"); // at jas@localhost;
  camera2 = new Basler(tree_name="basler", shot=0, path="\\top.basler2") at jas@localhost;

  writer1 = new MdsPutFrame(host="", treename="basler", shot=0, path="\\TOP:basler1:frames", first_time=-3.0);// at jas@localhost;
  writer2 = new MdsPutFrame(host="", treename="basler", shot=0, path="\\TOP:basler2:frames", first_time=-3.0) at jas@localhost;

  camera1.width_out -> writer1.width_in;
  camera1.height_out -> writer1.height_in;
  trig.operation_time -> writer1.op_start_time;
  camera1.frame_out -> writer1.frame_in

  camera2.width_out -> writer2.width_in;
  camera2.height_out -> writer2.height_in;
  trig.operation_time -> writer2.op_start_time;
  camera2.frame_out -> writer2.frame_in

  reaction(startup) -> shutItDown {=
    // Start a thread to schedule physical actions.
    lf_thread_create(&self->thread_id, &external, shutItDown);
  =}

  reaction(shutItDown) {=
      lf_request_stop();
  =}

}

